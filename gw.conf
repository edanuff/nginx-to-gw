worker_processes  1;   # we could enlarge this setting on a multi-core machine
error_log  logs/error.log info;

events {
    worker_connections  128;
}

http {
    server {
        listen          localhost:8081;

        location /gw_proxy {
            internal;
            resolver 8.8.8.8;
            proxy_http_version 1.1;
            proxy_pass $_url;
        }
                
        location / {
            # IMPORTANT:
            # modify this to point to your destination API server
            proxy_pass   http://legacy-api.com/;

            set $_url "";
        
            access_by_lua '
 
                -- inspect module is very helpful for debugging
                -- local inspect = require "lib.inspect";
                
                -- IMPORTANT:
                -- modify this variable to point to your configured Apigee gateway API base url
                --
                local gw_url = "http://apigee-ed-test.apigee.net/agent-endpoint" .. ngx.var.uri;

                if ngx.var.args then
                    gw_url = gw_url .. "?" .. ngx.var.args;
                end
                local gw_method = ngx.req.get_method();
                --local gw_headers = ngx.req.get_headers();
                --ngx.log(ngx.INFO, "[Lua] gw request method = ", gw_method);
                --ngx.log(ngx.INFO, "[Lua] gw request url = ", gw_url);
                
                -- mapping from string method name to numerical ngx method code
                local ngx_methods = {
                  ["GET"] = ngx.HTTP_GET,
                  ["HEAD"] = ngx.HTTP_HEAD,
                  ["PUT"] = ngx.HTTP_PUT,
                  ["POST"] = ngx.HTTP_POST,
                  ["DELETE"] = ngx.HTTP_DELETE,
                  ["OPTIONS"] = ngx.HTTP_OPTIONS
                }

                -- headers are automatically sent to subrequests, dont need to explicitly pass them
                -- fix content length

                local original_content_length = ngx.req.get_headers()["Content-Length"];
                if original_content_length then
                  --ngx.log(ngx.INFO, "[Lua] content length = ", original_content_length);
                  ngx.req.set_header("Content-Length", "0");
                end

                local res = ngx.location.capture("/gw_proxy", {
                  method = ngx_methods[gw_method],
                  body = "",
                  vars = {
                    _url = gw_url
                  }
                });

                if original_content_length then
                  ngx.req.set_header("Content-Length", original_content_length)
                end

                
                if res.status ~= 200 then
                  --ngx.log(ngx.INFO, "[Lua] gw response status = ", res.status);
                  --print(inspect(res.header));
                  if res.header then
                    --ngx.log(ngx.INFO, "[Lua] adding gateway headers");
                    for k,v in pairs(res.header) do
                       --ngx.log(ngx.INFO, "[Lua] adding gateway header: ", k);
                       ngx.header[k] = v
                    end
                  end
                  ngx.status = res.status;
                  if res.body then
                    --ngx.log(ngx.INFO, "[Lua] sending gateway content");
                    ngx.print(res.body)
                  end
                  return ngx.exit(ngx.HTTP_OK);
                end

                --print(inspect(res.header));

                -- headers not to append to the response headers
                -- TODO: figure out a way to allow these to intentionally set, perhaps via prefix
                local skip_gw_headers = {
                  ["accept"] = true,
                  ["accept-charset"] = true,
                  ["accept-encoding"] = true,
                  ["accept-language"] = true,
                  ["cache-control"] = true,
                  ["content-length"] = true,
                  ["content-type"] = true,
                  ["host"] = true,
                  ["if-modified-since"] = true,
                  ["if-none-match"] = true,
                  ["user-agent"] = true
                }
                if res.header then
                  --ngx.log(ngx.INFO, "[Lua] adding gateway headers");
                  for k,v in pairs(res.header) do
                    --ngx.log(ngx.INFO, "[Lua] checking gateway header: ", k);
                     if not skip_gw_headers[k:lower()] then
                       --ngx.log(ngx.INFO, "[Lua] adding gateway header: ", k);
                       ngx.header[k] = v
                     end
                  end
                end

            ';
        }
    }
}

